#kairosdb.service.datastore=org.kairosdb.plugin.remote.RemoteModule

#===============================================================================
# Remote datastore properties
# Load the RemoteListener modules instead of RemoteDatastore if you want to
# fork the flow of data.  This module allows you to continue writing to your
# configured Datastore as well as send data on to a remote Kairos cluster
# Sample use case is to run clusters in parallel before migrating to larger cluster
# Cannot be used in conjunction with the RemoteModule
#kairosdb.datastore.remote.service.remote=org.kairosdb.plugin.remote.ListenerModule

# Location to store data locally before it is sent off
kairosdb.datastore.remote.data_dir="."
kairosdb.datastore.remote.remote_url="http://10.92.1.41:8080"

# quartz cron schedule for sending data (currently set to 30 min)
kairosdb.datastore.remote.schedule="0 */30 * * * ?"

# delay the sending of data for a random number of seconds.
# this prevents all remote kairos nodes from sending data at the same time
# the default of 600 means the data will be sent every half hour plus some some
# delay up to 10 minutes.
kairosdb.datastore.remote.random_delay=0

# Optional prefix filter for remote module. If present, only metrics that start with the
# values in this comma-separated list are forwarded on.
#kairosdb.datastore.remote.prefix_filter=""

# Drops the oldest zipped files waiting to be sent if the available disk space percent is
# greater than the specified value. This is to prevent filling up the disk space
# if the receiving node is inaccessible. If set to 100, no files are deleted.
# The percent must be greater than 0.
kairosdb.datastore.remote.drop_on_used_disk_space_threshold_percent=95